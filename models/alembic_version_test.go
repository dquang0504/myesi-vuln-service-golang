// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAlembicVersions(t *testing.T) {
	t.Parallel()

	query := AlembicVersions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAlembicVersionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AlembicVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAlembicVersionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AlembicVersions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AlembicVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAlembicVersionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AlembicVersionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AlembicVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAlembicVersionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AlembicVersionExists(ctx, tx, o.VersionNum)
	if err != nil {
		t.Errorf("Unable to check if AlembicVersion exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AlembicVersionExists to return true, but got false.")
	}
}

func testAlembicVersionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	alembicVersionFound, err := FindAlembicVersion(ctx, tx, o.VersionNum)
	if err != nil {
		t.Error(err)
	}

	if alembicVersionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAlembicVersionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AlembicVersions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAlembicVersionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AlembicVersions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAlembicVersionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	alembicVersionOne := &AlembicVersion{}
	alembicVersionTwo := &AlembicVersion{}
	if err = randomize.Struct(seed, alembicVersionOne, alembicVersionDBTypes, false, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}
	if err = randomize.Struct(seed, alembicVersionTwo, alembicVersionDBTypes, false, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = alembicVersionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = alembicVersionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AlembicVersions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAlembicVersionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	alembicVersionOne := &AlembicVersion{}
	alembicVersionTwo := &AlembicVersion{}
	if err = randomize.Struct(seed, alembicVersionOne, alembicVersionDBTypes, false, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}
	if err = randomize.Struct(seed, alembicVersionTwo, alembicVersionDBTypes, false, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = alembicVersionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = alembicVersionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AlembicVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func alembicVersionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AlembicVersion) error {
	*o = AlembicVersion{}
	return nil
}

func alembicVersionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AlembicVersion) error {
	*o = AlembicVersion{}
	return nil
}

func alembicVersionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AlembicVersion) error {
	*o = AlembicVersion{}
	return nil
}

func alembicVersionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AlembicVersion) error {
	*o = AlembicVersion{}
	return nil
}

func alembicVersionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AlembicVersion) error {
	*o = AlembicVersion{}
	return nil
}

func alembicVersionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AlembicVersion) error {
	*o = AlembicVersion{}
	return nil
}

func alembicVersionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AlembicVersion) error {
	*o = AlembicVersion{}
	return nil
}

func alembicVersionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AlembicVersion) error {
	*o = AlembicVersion{}
	return nil
}

func alembicVersionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AlembicVersion) error {
	*o = AlembicVersion{}
	return nil
}

func testAlembicVersionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AlembicVersion{}
	o := &AlembicVersion{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AlembicVersion object: %s", err)
	}

	AddAlembicVersionHook(boil.BeforeInsertHook, alembicVersionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	alembicVersionBeforeInsertHooks = []AlembicVersionHook{}

	AddAlembicVersionHook(boil.AfterInsertHook, alembicVersionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	alembicVersionAfterInsertHooks = []AlembicVersionHook{}

	AddAlembicVersionHook(boil.AfterSelectHook, alembicVersionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	alembicVersionAfterSelectHooks = []AlembicVersionHook{}

	AddAlembicVersionHook(boil.BeforeUpdateHook, alembicVersionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	alembicVersionBeforeUpdateHooks = []AlembicVersionHook{}

	AddAlembicVersionHook(boil.AfterUpdateHook, alembicVersionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	alembicVersionAfterUpdateHooks = []AlembicVersionHook{}

	AddAlembicVersionHook(boil.BeforeDeleteHook, alembicVersionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	alembicVersionBeforeDeleteHooks = []AlembicVersionHook{}

	AddAlembicVersionHook(boil.AfterDeleteHook, alembicVersionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	alembicVersionAfterDeleteHooks = []AlembicVersionHook{}

	AddAlembicVersionHook(boil.BeforeUpsertHook, alembicVersionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	alembicVersionBeforeUpsertHooks = []AlembicVersionHook{}

	AddAlembicVersionHook(boil.AfterUpsertHook, alembicVersionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	alembicVersionAfterUpsertHooks = []AlembicVersionHook{}
}

func testAlembicVersionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AlembicVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAlembicVersionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(alembicVersionPrimaryKeyColumns, alembicVersionColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := AlembicVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAlembicVersionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAlembicVersionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AlembicVersionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAlembicVersionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AlembicVersions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	alembicVersionDBTypes = map[string]string{`VersionNum`: `character varying`}
	_                     = bytes.MinRead
)

func testAlembicVersionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(alembicVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(alembicVersionAllColumns) == len(alembicVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AlembicVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAlembicVersionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(alembicVersionAllColumns) == len(alembicVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AlembicVersion{}
	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AlembicVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, alembicVersionDBTypes, true, alembicVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(alembicVersionAllColumns, alembicVersionPrimaryKeyColumns) {
		fields = alembicVersionAllColumns
	} else {
		fields = strmangle.SetComplement(
			alembicVersionAllColumns,
			alembicVersionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AlembicVersionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAlembicVersionsUpsert(t *testing.T) {
	t.Parallel()

	if len(alembicVersionAllColumns) == len(alembicVersionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AlembicVersion{}
	if err = randomize.Struct(seed, &o, alembicVersionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AlembicVersion: %s", err)
	}

	count, err := AlembicVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, alembicVersionDBTypes, false, alembicVersionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AlembicVersion struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AlembicVersion: %s", err)
	}

	count, err = AlembicVersions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
