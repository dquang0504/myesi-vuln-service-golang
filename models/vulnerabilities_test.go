// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testVulnerabilities(t *testing.T) {
	t.Parallel()

	query := Vulnerabilities()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVulnerabilitiesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Vulnerabilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVulnerabilitiesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Vulnerabilities().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Vulnerabilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVulnerabilitiesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VulnerabilitySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Vulnerabilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVulnerabilitiesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := VulnerabilityExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Vulnerability exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VulnerabilityExists to return true, but got false.")
	}
}

func testVulnerabilitiesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	vulnerabilityFound, err := FindVulnerability(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if vulnerabilityFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVulnerabilitiesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Vulnerabilities().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testVulnerabilitiesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Vulnerabilities().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVulnerabilitiesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	vulnerabilityOne := &Vulnerability{}
	vulnerabilityTwo := &Vulnerability{}
	if err = randomize.Struct(seed, vulnerabilityOne, vulnerabilityDBTypes, false, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}
	if err = randomize.Struct(seed, vulnerabilityTwo, vulnerabilityDBTypes, false, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = vulnerabilityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = vulnerabilityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Vulnerabilities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVulnerabilitiesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	vulnerabilityOne := &Vulnerability{}
	vulnerabilityTwo := &Vulnerability{}
	if err = randomize.Struct(seed, vulnerabilityOne, vulnerabilityDBTypes, false, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}
	if err = randomize.Struct(seed, vulnerabilityTwo, vulnerabilityDBTypes, false, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = vulnerabilityOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = vulnerabilityTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vulnerabilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func vulnerabilityBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Vulnerability) error {
	*o = Vulnerability{}
	return nil
}

func vulnerabilityAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Vulnerability) error {
	*o = Vulnerability{}
	return nil
}

func vulnerabilityAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Vulnerability) error {
	*o = Vulnerability{}
	return nil
}

func vulnerabilityBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Vulnerability) error {
	*o = Vulnerability{}
	return nil
}

func vulnerabilityAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Vulnerability) error {
	*o = Vulnerability{}
	return nil
}

func vulnerabilityBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Vulnerability) error {
	*o = Vulnerability{}
	return nil
}

func vulnerabilityAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Vulnerability) error {
	*o = Vulnerability{}
	return nil
}

func vulnerabilityBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Vulnerability) error {
	*o = Vulnerability{}
	return nil
}

func vulnerabilityAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Vulnerability) error {
	*o = Vulnerability{}
	return nil
}

func testVulnerabilitiesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Vulnerability{}
	o := &Vulnerability{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Vulnerability object: %s", err)
	}

	AddVulnerabilityHook(boil.BeforeInsertHook, vulnerabilityBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	vulnerabilityBeforeInsertHooks = []VulnerabilityHook{}

	AddVulnerabilityHook(boil.AfterInsertHook, vulnerabilityAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	vulnerabilityAfterInsertHooks = []VulnerabilityHook{}

	AddVulnerabilityHook(boil.AfterSelectHook, vulnerabilityAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	vulnerabilityAfterSelectHooks = []VulnerabilityHook{}

	AddVulnerabilityHook(boil.BeforeUpdateHook, vulnerabilityBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	vulnerabilityBeforeUpdateHooks = []VulnerabilityHook{}

	AddVulnerabilityHook(boil.AfterUpdateHook, vulnerabilityAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	vulnerabilityAfterUpdateHooks = []VulnerabilityHook{}

	AddVulnerabilityHook(boil.BeforeDeleteHook, vulnerabilityBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	vulnerabilityBeforeDeleteHooks = []VulnerabilityHook{}

	AddVulnerabilityHook(boil.AfterDeleteHook, vulnerabilityAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	vulnerabilityAfterDeleteHooks = []VulnerabilityHook{}

	AddVulnerabilityHook(boil.BeforeUpsertHook, vulnerabilityBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	vulnerabilityBeforeUpsertHooks = []VulnerabilityHook{}

	AddVulnerabilityHook(boil.AfterUpsertHook, vulnerabilityAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	vulnerabilityAfterUpsertHooks = []VulnerabilityHook{}
}

func testVulnerabilitiesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vulnerabilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVulnerabilitiesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(vulnerabilityPrimaryKeyColumns, vulnerabilityColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Vulnerabilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVulnerabilitiesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVulnerabilitiesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := VulnerabilitySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testVulnerabilitiesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Vulnerabilities().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	vulnerabilityDBTypes = map[string]string{`ID`: `bigint`, `SbomID`: `uuid`, `ProjectName`: `text`, `ComponentName`: `text`, `ComponentVersion`: `text`, `VulnID`: `text`, `Severity`: `text`, `OsvMetadata`: `jsonb`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_                    = bytes.MinRead
)

func testVulnerabilitiesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(vulnerabilityPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(vulnerabilityAllColumns) == len(vulnerabilityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vulnerabilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testVulnerabilitiesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(vulnerabilityAllColumns) == len(vulnerabilityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Vulnerability{}
	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Vulnerabilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, vulnerabilityDBTypes, true, vulnerabilityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(vulnerabilityAllColumns, vulnerabilityPrimaryKeyColumns) {
		fields = vulnerabilityAllColumns
	} else {
		fields = strmangle.SetComplement(
			vulnerabilityAllColumns,
			vulnerabilityPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := VulnerabilitySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testVulnerabilitiesUpsert(t *testing.T) {
	t.Parallel()

	if len(vulnerabilityAllColumns) == len(vulnerabilityPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Vulnerability{}
	if err = randomize.Struct(seed, &o, vulnerabilityDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Vulnerability: %s", err)
	}

	count, err := Vulnerabilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, vulnerabilityDBTypes, false, vulnerabilityPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Vulnerability struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Vulnerability: %s", err)
	}

	count, err = Vulnerabilities().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
