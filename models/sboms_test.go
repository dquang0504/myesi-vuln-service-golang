// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/aarondl/randomize"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSboms(t *testing.T) {
	t.Parallel()

	query := Sboms()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSbomsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sboms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSbomsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Sboms().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sboms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSbomsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SbomSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sboms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSbomsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SbomExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Sbom exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SbomExists to return true, but got false.")
	}
}

func testSbomsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sbomFound, err := FindSbom(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sbomFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSbomsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Sboms().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSbomsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Sboms().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSbomsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sbomOne := &Sbom{}
	sbomTwo := &Sbom{}
	if err = randomize.Struct(seed, sbomOne, sbomDBTypes, false, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}
	if err = randomize.Struct(seed, sbomTwo, sbomDBTypes, false, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sbomOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sbomTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sboms().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSbomsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sbomOne := &Sbom{}
	sbomTwo := &Sbom{}
	if err = randomize.Struct(seed, sbomOne, sbomDBTypes, false, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}
	if err = randomize.Struct(seed, sbomTwo, sbomDBTypes, false, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sbomOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sbomTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sboms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sbomBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Sbom) error {
	*o = Sbom{}
	return nil
}

func sbomAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Sbom) error {
	*o = Sbom{}
	return nil
}

func sbomAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Sbom) error {
	*o = Sbom{}
	return nil
}

func sbomBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Sbom) error {
	*o = Sbom{}
	return nil
}

func sbomAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Sbom) error {
	*o = Sbom{}
	return nil
}

func sbomBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Sbom) error {
	*o = Sbom{}
	return nil
}

func sbomAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Sbom) error {
	*o = Sbom{}
	return nil
}

func sbomBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Sbom) error {
	*o = Sbom{}
	return nil
}

func sbomAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Sbom) error {
	*o = Sbom{}
	return nil
}

func testSbomsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Sbom{}
	o := &Sbom{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sbomDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Sbom object: %s", err)
	}

	AddSbomHook(boil.BeforeInsertHook, sbomBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sbomBeforeInsertHooks = []SbomHook{}

	AddSbomHook(boil.AfterInsertHook, sbomAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sbomAfterInsertHooks = []SbomHook{}

	AddSbomHook(boil.AfterSelectHook, sbomAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sbomAfterSelectHooks = []SbomHook{}

	AddSbomHook(boil.BeforeUpdateHook, sbomBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sbomBeforeUpdateHooks = []SbomHook{}

	AddSbomHook(boil.AfterUpdateHook, sbomAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sbomAfterUpdateHooks = []SbomHook{}

	AddSbomHook(boil.BeforeDeleteHook, sbomBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sbomBeforeDeleteHooks = []SbomHook{}

	AddSbomHook(boil.AfterDeleteHook, sbomAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sbomAfterDeleteHooks = []SbomHook{}

	AddSbomHook(boil.BeforeUpsertHook, sbomBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sbomBeforeUpsertHooks = []SbomHook{}

	AddSbomHook(boil.AfterUpsertHook, sbomAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sbomAfterUpsertHooks = []SbomHook{}
}

func testSbomsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sboms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSbomsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(strmangle.SetMerge(sbomPrimaryKeyColumns, sbomColumnsWithoutDefault)...)); err != nil {
		t.Error(err)
	}

	count, err := Sboms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSbomsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSbomsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SbomSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSbomsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sboms().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sbomDBTypes = map[string]string{`ID`: `uuid`, `ProjectName`: `character varying`, `Source`: `character varying`, `Sbom`: `jsonb`, `Summary`: `jsonb`, `ObjectURL`: `character varying`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_           = bytes.MinRead
)

func testSbomsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sbomPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sbomAllColumns) == len(sbomPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sboms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSbomsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sbomAllColumns) == len(sbomPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Sbom{}
	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sboms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sbomDBTypes, true, sbomPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sbomAllColumns, sbomPrimaryKeyColumns) {
		fields = sbomAllColumns
	} else {
		fields = strmangle.SetComplement(
			sbomAllColumns,
			sbomPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SbomSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSbomsUpsert(t *testing.T) {
	t.Parallel()

	if len(sbomAllColumns) == len(sbomPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Sbom{}
	if err = randomize.Struct(seed, &o, sbomDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Sbom: %s", err)
	}

	count, err := Sboms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sbomDBTypes, false, sbomPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sbom struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Sbom: %s", err)
	}

	count, err = Sboms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
