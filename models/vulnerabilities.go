// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Vulnerability is an object representing the database table.
type Vulnerability struct {
	ID                 int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	SbomID             string      `boil:"sbom_id" json:"sbom_id" toml:"sbom_id" yaml:"sbom_id"`
	ProjectName        null.String `boil:"project_name" json:"project_name,omitempty" toml:"project_name" yaml:"project_name,omitempty"`
	ComponentName      string      `boil:"component_name" json:"component_name" toml:"component_name" yaml:"component_name"`
	ComponentVersion   string      `boil:"component_version" json:"component_version" toml:"component_version" yaml:"component_version"`
	VulnID             null.String `boil:"vuln_id" json:"vuln_id,omitempty" toml:"vuln_id" yaml:"vuln_id,omitempty"`
	Severity           null.String `boil:"severity" json:"severity,omitempty" toml:"severity" yaml:"severity,omitempty"`
	OsvMetadata        null.JSON   `boil:"osv_metadata" json:"osv_metadata,omitempty" toml:"osv_metadata" yaml:"osv_metadata,omitempty"`
	CVSSVector         null.String `boil:"cvss_vector" json:"cvss_vector,omitempty" toml:"cvss_vector" yaml:"cvss_vector,omitempty"`
	SbomComponentCount null.Int    `boil:"sbom_component_count" json:"sbom_component_count,omitempty" toml:"sbom_component_count" yaml:"sbom_component_count,omitempty"`
	SbomHash           null.String `boil:"sbom_hash" json:"sbom_hash,omitempty" toml:"sbom_hash" yaml:"sbom_hash,omitempty"`
	CreatedAt          null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt          null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *vulnerabilityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L vulnerabilityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VulnerabilityColumns = struct {
	ID                 string
	SbomID             string
	ProjectName        string
	ComponentName      string
	ComponentVersion   string
	VulnID             string
	Severity           string
	OsvMetadata        string
	CVSSVector         string
	SbomComponentCount string
	SbomHash           string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "id",
	SbomID:             "sbom_id",
	ProjectName:        "project_name",
	ComponentName:      "component_name",
	ComponentVersion:   "component_version",
	VulnID:             "vuln_id",
	Severity:           "severity",
	OsvMetadata:        "osv_metadata",
	CVSSVector:         "cvss_vector",
	SbomComponentCount: "sbom_component_count",
	SbomHash:           "sbom_hash",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
}

var VulnerabilityTableColumns = struct {
	ID                 string
	SbomID             string
	ProjectName        string
	ComponentName      string
	ComponentVersion   string
	VulnID             string
	Severity           string
	OsvMetadata        string
	CVSSVector         string
	SbomComponentCount string
	SbomHash           string
	CreatedAt          string
	UpdatedAt          string
}{
	ID:                 "vulnerabilities.id",
	SbomID:             "vulnerabilities.sbom_id",
	ProjectName:        "vulnerabilities.project_name",
	ComponentName:      "vulnerabilities.component_name",
	ComponentVersion:   "vulnerabilities.component_version",
	VulnID:             "vulnerabilities.vuln_id",
	Severity:           "vulnerabilities.severity",
	OsvMetadata:        "vulnerabilities.osv_metadata",
	CVSSVector:         "vulnerabilities.cvss_vector",
	SbomComponentCount: "vulnerabilities.sbom_component_count",
	SbomHash:           "vulnerabilities.sbom_hash",
	CreatedAt:          "vulnerabilities.created_at",
	UpdatedAt:          "vulnerabilities.updated_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var VulnerabilityWhere = struct {
	ID                 whereHelperint64
	SbomID             whereHelperstring
	ProjectName        whereHelpernull_String
	ComponentName      whereHelperstring
	ComponentVersion   whereHelperstring
	VulnID             whereHelpernull_String
	Severity           whereHelpernull_String
	OsvMetadata        whereHelpernull_JSON
	CVSSVector         whereHelpernull_String
	SbomComponentCount whereHelpernull_Int
	SbomHash           whereHelpernull_String
	CreatedAt          whereHelpernull_Time
	UpdatedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint64{field: "\"vulnerabilities\".\"id\""},
	SbomID:             whereHelperstring{field: "\"vulnerabilities\".\"sbom_id\""},
	ProjectName:        whereHelpernull_String{field: "\"vulnerabilities\".\"project_name\""},
	ComponentName:      whereHelperstring{field: "\"vulnerabilities\".\"component_name\""},
	ComponentVersion:   whereHelperstring{field: "\"vulnerabilities\".\"component_version\""},
	VulnID:             whereHelpernull_String{field: "\"vulnerabilities\".\"vuln_id\""},
	Severity:           whereHelpernull_String{field: "\"vulnerabilities\".\"severity\""},
	OsvMetadata:        whereHelpernull_JSON{field: "\"vulnerabilities\".\"osv_metadata\""},
	CVSSVector:         whereHelpernull_String{field: "\"vulnerabilities\".\"cvss_vector\""},
	SbomComponentCount: whereHelpernull_Int{field: "\"vulnerabilities\".\"sbom_component_count\""},
	SbomHash:           whereHelpernull_String{field: "\"vulnerabilities\".\"sbom_hash\""},
	CreatedAt:          whereHelpernull_Time{field: "\"vulnerabilities\".\"created_at\""},
	UpdatedAt:          whereHelpernull_Time{field: "\"vulnerabilities\".\"updated_at\""},
}

// VulnerabilityRels is where relationship names are stored.
var VulnerabilityRels = struct {
}{}

// vulnerabilityR is where relationships are stored.
type vulnerabilityR struct {
}

// NewStruct creates a new relationship struct
func (*vulnerabilityR) NewStruct() *vulnerabilityR {
	return &vulnerabilityR{}
}

// vulnerabilityL is where Load methods for each relationship are stored.
type vulnerabilityL struct{}

var (
	vulnerabilityAllColumns            = []string{"id", "sbom_id", "project_name", "component_name", "component_version", "vuln_id", "severity", "osv_metadata", "cvss_vector", "sbom_component_count", "sbom_hash", "created_at", "updated_at"}
	vulnerabilityColumnsWithoutDefault = []string{"sbom_id", "component_name", "component_version"}
	vulnerabilityColumnsWithDefault    = []string{"id", "project_name", "vuln_id", "severity", "osv_metadata", "cvss_vector", "sbom_component_count", "sbom_hash", "created_at", "updated_at"}
	vulnerabilityPrimaryKeyColumns     = []string{"id"}
	vulnerabilityGeneratedColumns      = []string{}
)

type (
	// VulnerabilitySlice is an alias for a slice of pointers to Vulnerability.
	// This should almost always be used instead of []Vulnerability.
	VulnerabilitySlice []*Vulnerability
	// VulnerabilityHook is the signature for custom Vulnerability hook methods
	VulnerabilityHook func(context.Context, boil.ContextExecutor, *Vulnerability) error

	vulnerabilityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vulnerabilityType                 = reflect.TypeOf(&Vulnerability{})
	vulnerabilityMapping              = queries.MakeStructMapping(vulnerabilityType)
	vulnerabilityPrimaryKeyMapping, _ = queries.BindMapping(vulnerabilityType, vulnerabilityMapping, vulnerabilityPrimaryKeyColumns)
	vulnerabilityInsertCacheMut       sync.RWMutex
	vulnerabilityInsertCache          = make(map[string]insertCache)
	vulnerabilityUpdateCacheMut       sync.RWMutex
	vulnerabilityUpdateCache          = make(map[string]updateCache)
	vulnerabilityUpsertCacheMut       sync.RWMutex
	vulnerabilityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var vulnerabilityAfterSelectMu sync.Mutex
var vulnerabilityAfterSelectHooks []VulnerabilityHook

var vulnerabilityBeforeInsertMu sync.Mutex
var vulnerabilityBeforeInsertHooks []VulnerabilityHook
var vulnerabilityAfterInsertMu sync.Mutex
var vulnerabilityAfterInsertHooks []VulnerabilityHook

var vulnerabilityBeforeUpdateMu sync.Mutex
var vulnerabilityBeforeUpdateHooks []VulnerabilityHook
var vulnerabilityAfterUpdateMu sync.Mutex
var vulnerabilityAfterUpdateHooks []VulnerabilityHook

var vulnerabilityBeforeDeleteMu sync.Mutex
var vulnerabilityBeforeDeleteHooks []VulnerabilityHook
var vulnerabilityAfterDeleteMu sync.Mutex
var vulnerabilityAfterDeleteHooks []VulnerabilityHook

var vulnerabilityBeforeUpsertMu sync.Mutex
var vulnerabilityBeforeUpsertHooks []VulnerabilityHook
var vulnerabilityAfterUpsertMu sync.Mutex
var vulnerabilityAfterUpsertHooks []VulnerabilityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Vulnerability) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vulnerabilityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Vulnerability) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vulnerabilityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Vulnerability) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vulnerabilityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Vulnerability) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vulnerabilityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Vulnerability) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vulnerabilityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Vulnerability) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vulnerabilityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Vulnerability) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vulnerabilityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Vulnerability) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vulnerabilityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Vulnerability) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vulnerabilityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVulnerabilityHook registers your hook function for all future operations.
func AddVulnerabilityHook(hookPoint boil.HookPoint, vulnerabilityHook VulnerabilityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vulnerabilityAfterSelectMu.Lock()
		vulnerabilityAfterSelectHooks = append(vulnerabilityAfterSelectHooks, vulnerabilityHook)
		vulnerabilityAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		vulnerabilityBeforeInsertMu.Lock()
		vulnerabilityBeforeInsertHooks = append(vulnerabilityBeforeInsertHooks, vulnerabilityHook)
		vulnerabilityBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		vulnerabilityAfterInsertMu.Lock()
		vulnerabilityAfterInsertHooks = append(vulnerabilityAfterInsertHooks, vulnerabilityHook)
		vulnerabilityAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		vulnerabilityBeforeUpdateMu.Lock()
		vulnerabilityBeforeUpdateHooks = append(vulnerabilityBeforeUpdateHooks, vulnerabilityHook)
		vulnerabilityBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		vulnerabilityAfterUpdateMu.Lock()
		vulnerabilityAfterUpdateHooks = append(vulnerabilityAfterUpdateHooks, vulnerabilityHook)
		vulnerabilityAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		vulnerabilityBeforeDeleteMu.Lock()
		vulnerabilityBeforeDeleteHooks = append(vulnerabilityBeforeDeleteHooks, vulnerabilityHook)
		vulnerabilityBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		vulnerabilityAfterDeleteMu.Lock()
		vulnerabilityAfterDeleteHooks = append(vulnerabilityAfterDeleteHooks, vulnerabilityHook)
		vulnerabilityAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		vulnerabilityBeforeUpsertMu.Lock()
		vulnerabilityBeforeUpsertHooks = append(vulnerabilityBeforeUpsertHooks, vulnerabilityHook)
		vulnerabilityBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		vulnerabilityAfterUpsertMu.Lock()
		vulnerabilityAfterUpsertHooks = append(vulnerabilityAfterUpsertHooks, vulnerabilityHook)
		vulnerabilityAfterUpsertMu.Unlock()
	}
}

// One returns a single vulnerability record from the query.
func (q vulnerabilityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Vulnerability, error) {
	o := &Vulnerability{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for vulnerabilities")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Vulnerability records from the query.
func (q vulnerabilityQuery) All(ctx context.Context, exec boil.ContextExecutor) (VulnerabilitySlice, error) {
	var o []*Vulnerability

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Vulnerability slice")
	}

	if len(vulnerabilityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Vulnerability records in the query.
func (q vulnerabilityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count vulnerabilities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vulnerabilityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if vulnerabilities exists")
	}

	return count > 0, nil
}

// Vulnerabilities retrieves all the records using an executor.
func Vulnerabilities(mods ...qm.QueryMod) vulnerabilityQuery {
	mods = append(mods, qm.From("\"vulnerabilities\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vulnerabilities\".*"})
	}

	return vulnerabilityQuery{q}
}

// FindVulnerability retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVulnerability(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Vulnerability, error) {
	vulnerabilityObj := &Vulnerability{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vulnerabilities\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, vulnerabilityObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from vulnerabilities")
	}

	if err = vulnerabilityObj.doAfterSelectHooks(ctx, exec); err != nil {
		return vulnerabilityObj, err
	}

	return vulnerabilityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Vulnerability) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no vulnerabilities provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vulnerabilityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	vulnerabilityInsertCacheMut.RLock()
	cache, cached := vulnerabilityInsertCache[key]
	vulnerabilityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			vulnerabilityAllColumns,
			vulnerabilityColumnsWithDefault,
			vulnerabilityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(vulnerabilityType, vulnerabilityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(vulnerabilityType, vulnerabilityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vulnerabilities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vulnerabilities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into vulnerabilities")
	}

	if !cached {
		vulnerabilityInsertCacheMut.Lock()
		vulnerabilityInsertCache[key] = cache
		vulnerabilityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Vulnerability.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Vulnerability) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	vulnerabilityUpdateCacheMut.RLock()
	cache, cached := vulnerabilityUpdateCache[key]
	vulnerabilityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			vulnerabilityAllColumns,
			vulnerabilityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update vulnerabilities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vulnerabilities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, vulnerabilityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(vulnerabilityType, vulnerabilityMapping, append(wl, vulnerabilityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update vulnerabilities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for vulnerabilities")
	}

	if !cached {
		vulnerabilityUpdateCacheMut.Lock()
		vulnerabilityUpdateCache[key] = cache
		vulnerabilityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q vulnerabilityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for vulnerabilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for vulnerabilities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VulnerabilitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vulnerabilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vulnerabilities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, vulnerabilityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in vulnerability slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all vulnerability")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Vulnerability) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no vulnerabilities provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(vulnerabilityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	vulnerabilityUpsertCacheMut.RLock()
	cache, cached := vulnerabilityUpsertCache[key]
	vulnerabilityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			vulnerabilityAllColumns,
			vulnerabilityColumnsWithDefault,
			vulnerabilityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			vulnerabilityAllColumns,
			vulnerabilityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert vulnerabilities, could not build update column list")
		}

		ret := strmangle.SetComplement(vulnerabilityAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(vulnerabilityPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert vulnerabilities, could not build conflict column list")
			}

			conflict = make([]string, len(vulnerabilityPrimaryKeyColumns))
			copy(conflict, vulnerabilityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vulnerabilities\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(vulnerabilityType, vulnerabilityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(vulnerabilityType, vulnerabilityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert vulnerabilities")
	}

	if !cached {
		vulnerabilityUpsertCacheMut.Lock()
		vulnerabilityUpsertCache[key] = cache
		vulnerabilityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Vulnerability record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Vulnerability) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Vulnerability provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), vulnerabilityPrimaryKeyMapping)
	sql := "DELETE FROM \"vulnerabilities\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from vulnerabilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for vulnerabilities")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q vulnerabilityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no vulnerabilityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vulnerabilities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vulnerabilities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VulnerabilitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(vulnerabilityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vulnerabilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vulnerabilities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vulnerabilityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from vulnerability slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for vulnerabilities")
	}

	if len(vulnerabilityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Vulnerability) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVulnerability(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VulnerabilitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VulnerabilitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), vulnerabilityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vulnerabilities\".* FROM \"vulnerabilities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, vulnerabilityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in VulnerabilitySlice")
	}

	*o = slice

	return nil
}

// VulnerabilityExists checks if the Vulnerability row exists.
func VulnerabilityExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vulnerabilities\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if vulnerabilities exists")
	}

	return exists, nil
}

// Exists checks if the Vulnerability row exists.
func (o *Vulnerability) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VulnerabilityExists(ctx, exec, o.ID)
}
